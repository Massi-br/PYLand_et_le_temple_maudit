#BlueJ class context
comment0.target=Maze
comment0.text=\r\n\ Le\ labyrinthe\ des\ pi\u00C3\u00A8ces,\ rectangulaire\ (rows\ *\ cols)\ parfait\ (toute\r\n\ \ pi\u00C3\u00A8ce\ est\ accessible)\ et\ 1-connexe\ (toute\ pi\u00C3\u00A8ce\ est\ accessible\ par\ un\r\n\ \ seul\ chemin).\r\n\ @inv\ <pre>\r\n\ \ \ \ \ colsNb()\ >\=\ MIN_SIZE\r\n\ \ \ \ \ rowsNb()\ >\=\ MIN_SIZE\r\n\ \ \ \ \ entry()\ \!\=\ null\r\n\ \ \ \ \ exit()\ \!\=\ null\ </pre>\r\n
comment1.params=n\ m
comment1.target=Maze(int,\ int)
comment1.text=\r\n\ Un\ labyrinthe\ \u00C3\u00A0\ n\ lignes\ et\ m\ colonnes.\r\n\ @pre\ <pre>\r\n\ \ \ \ \ n\ >\=\ MIN_SIZE\ &&\ m\ >\=\ MIN_SIZE\ </pre>\r\n\ @post\ <pre>\r\n\ \ \ \ \ rowsNb()\ \=\=\ n\r\n\ \ \ \ \ colsNb()\ \=\=\ m\ </pre>\r\n
comment10.params=r
comment10.target=void\ mark(pyland.model.IRoom)
comment10.text=\r\n\ Marque\ la\ pi\u00C3\u00A8ce\ r\ comme\ visit\u00C3\u00A9e\ (utilis\u00C3\u00A9\ lors\ de\ l'affichage\ du\r\n\ \ labyrinthe).\r\n
comment11.params=i\ j
comment11.target=MazeRoom\ get(int,\ int)
comment12.params=i\ j
comment12.target=boolean\ powerPlayerAround(int,\ int)
comment13.params=r
comment13.target=int[]\ find(pyland.model.IRoom)
comment13.text=\r\n\ D\u00C3\u00A9tecte\ les\ coordonn\u00C3\u00A9es\ (dans\ maze)\ de\ la\ pi\u00C3\u00A8ce\ r.\r\n\ Retourne\ null\ si\ pas\ trouv\u00C3\u00A9e.\r\n
comment14.params=
comment14.target=void\ initRooms()
comment14.text=\r\n\ Alloue\ des\ salles\ toutes\ neuves\ au\ tableau\ maze\ en\ vue\ de\ la\ construction\r\n\ \ du\ labyrinthe.\r\n
comment15.params=
comment15.target=java.util.Set[]\ getSpecialNumbers()
comment15.text=\r\n\ Retourne\ 3\ ensembles\ de\ coordonn\u00C3\u00A9es\ al\u00C3\u00A9atoires\ (sous\ forme\ d'entiers).\r\n\ Chaque\ \u00C3\u00A9l\u00C3\u00A9ment\ entier\ n\ devra\ \u00C3\u00AAtre\ d\u00C3\u00A9cod\u00C3\u00A9\ ainsi\ \:\r\n\ -\ row\ \=\ n\ /\ cols\r\n\ -\ col\ \=\ n\ %\ cols\r\n\ Les\ ensembles\ sont\ deux\ \u00C3\u00A0\ deux\ disjoints.\r\n\ Le\ premier\ donne\ les\ coordonn\u00C3\u00A9es\ des\ MagicRooms.\r\n\ Le\ deuxi\u00C3\u00A8me\ donne\ les\ coordonn\u00C3\u00A9es\ des\ DoomRooms.\r\n\ Le\ dernier\ donne\ les\ coordonn\u00C3\u00A9es\ des\ MonsterRooms.\r\n
comment16.params=x
comment16.target=boolean\ nearEntry(int)
comment17.params=
comment17.target=void\ buildMaze()
comment17.text=\r\n\ Casse\ les\ murs\ al\u00C3\u00A9atoirement\ pour\ construire\ un\ labyrinthe\ parfait\r\n\ \ 1-connexe.\r\n\ Puis\ casse\ encore\ quelques\ cloisons\ pour\ que\ ce\ soit\ plus\ fun.\r\n
comment18.params=
comment18.target=void\ createSomeMoreConnexions()
comment18.text=\r\n\ Casse\ quelques\ cloisons\ en\ plus\ entre\ les\ salles\ pour\ avoir\ un\ labyrinthe\r\n\ \ imparfait,\ c'est-\u00C3\u00A0-dire\ qu'une\ salle\ peut\ \u00C3\u00AAtre\ acc\u00C3\u00A9d\u00C3\u00A9e\ par\ plusieurs\r\n\ \ chemins.\r\n\ C'est\ moins\ parfait\ mais\ c'est\ plus\ sympa.\r\n
comment19.params=cell
comment19.target=java.util.List\ getPossibleNeighbours(int[])
comment19.text=\r\n\ Retourne\ la\ liste\ des\ voisines\ de\ la\ salle\ situ\u00C3\u00A9e\ en\ cell,\ dont\ les\r\n\ \ cloisons\ avec\ cette\ salle\ ne\ sont\ pas\ encore\ perc\u00C3\u00A9es.\r\n
comment2.params=
comment2.target=int\ rowsNb()
comment20.params=cell
comment20.target=void\ connect(int[])
comment20.text=\r\n\ Connecte\ la\ pi\u00C3\u00A8ce\ en\ coordonn\u00C3\u00A9es\ cell.\r\n
comment21.params=cell
comment21.target=java.util.List\ getDisconnectedNeighbours(int[])
comment21.text=\r\n\ Retourne\ la\ liste\ des\ pi\u00C3\u00A8ces\ voisines\ de\ cell\ non\ connect\u00C3\u00A9es\ \u00C3\u00A0\r\n\ \ l'int\u00C3\u00A9rieur\ du\ labyrinthe.\r\n
comment22.params=src\ dest
comment22.target=void\ dig(int[],\ int[])
comment22.text=\r\n\ Creuse\ un\ passage\ entre\ les\ salles\ aux\ positions\ src\ et\ dest\ sur\r\n\ \ le\ labyrinthe.\r\n
comment3.params=
comment3.target=int\ colsNb()
comment4.params=
comment4.target=pyland.model.IRoom\ entry()
comment4.text=\r\n\ L'entr\u00C3\u00A9e\ du\ labyrinthe\ \:\ la\ salle\ en\ bas\ \u00C3\u00A0\ gauche.\r\n
comment5.params=
comment5.target=pyland.model.IRoom\ exit()
comment5.text=\r\n\ La\ sortie\ du\ labyrinthe\ \:\ la\ salle\ en\ haut\ \u00C3\u00A0\ droite.\r\n
comment6.params=
comment6.target=java.lang.String\ describe()
comment6.text=\r\n\ Une\ cha\u00C3\u00AEne\ qui\ d\u00C3\u00A9crit\ le\ labyrinthe.\r\n
comment7.params=
comment7.target=void\ lightOff()
comment7.text=\r\n\ Eteint\ le\ labyrinthe\ (on\ ne\ voit\ que\ la\ partie\ d\u00C3\u00A9j\u00C3\u00A0\ visit\u00C3\u00A9e\ du\r\n\ \ labyrinthe).\r\n
comment8.params=
comment8.target=void\ lightOn()
comment8.text=\r\n\ Allume\ le\ labyrinthe\ (on\ voit\ tout\ le\ labyrinthe).\r\n
comment9.params=
comment9.target=void\ build()
comment9.text=\r\n\ @post\ <pre>\r\n\ \ \ \ \ Le\ labyrinthe\ est\ constitu\u00C3\u00A9\ de\ nouvelles\ pi\u00C3\u00A8ces\ dont\ les\ parois\ ont\r\n\ \ \ \ \ \ \u00C3\u00A9ventuellement\ \u00C3\u00A9t\u00C3\u00A9\ creus\u00C3\u00A9es\ pour\ constituer\ un\ labyrinthe\ parfait\r\n\ \ \ \ \ \ 1-connexe.\ </pre>\r\n
numComments=23
